name: CI Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

env:
  TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
  TURBO_TEAM: ${{ secrets.TURBO_TEAM }}
  NODE_VERSION: '18'
  PNPM_VERSION: '8'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

jobs:
  # =========================================
  # SETUP AND CACHE
  # =========================================
  setup:
    name: Setup Dependencies
    runs-on: ubuntu-latest
    outputs:
      has-app-changes: ${{ steps.changes.outputs.app }}
      has-package-changes: ${{ steps.changes.outputs.packages }}
      has-db-changes: ${{ steps.changes.outputs.database }}
      has-test-changes: ${{ steps.changes.outputs.tests }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changes
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            app:
              - 'apps/web/**'
              - 'turbo.json'
              - 'package.json'
              - 'pnpm-lock.yaml'
            packages:
              - 'packages/**'
              - 'turbo.json'
              - 'package.json'
              - 'pnpm-lock.yaml'
            database:
              - 'supabase/**'
              - '**/migrations/**'
            tests:
              - '**/*.{test,spec}.{ts,tsx,js,jsx}'
              - 'vitest.config.ts'
              - 'vitest.setup.*.ts'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Cache Turbo
        uses: actions/cache@v4
        with:
          path: |
            .turbo
            apps/**/.turbo
            packages/**/.turbo
          key: ${{ runner.os }}-turbo-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-turbo-

  # =========================================
  # LINTING AND TYPESCRIPT
  # =========================================
  lint:
    name: Lint & Format
    runs-on: ubuntu-latest
    needs: setup
    if: needs.setup.outputs.has-app-changes == 'true' || needs.setup.outputs.has-package-changes == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Restore pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Restore Turbo cache
        uses: actions/cache@v4
        with:
          path: |
            .turbo
            apps/**/.turbo
            packages/**/.turbo
          key: ${{ runner.os }}-turbo-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-turbo-

      - name: Run ESLint
        run: pnpm lint

      - name: Check Prettier formatting
        run: pnpm format:check

      - name: Check for lint-staged compatibility
        if: github.event_name == 'pull_request'
        run: |
          # Simulate lint-staged for PR validation
          git diff --name-only origin/${{ github.base_ref }}...HEAD | grep -E '\.(ts|tsx|js|jsx)$' | xargs pnpm exec eslint
          git diff --name-only origin/${{ github.base_ref }}...HEAD | grep -E '\.(ts|tsx|js|jsx|json|md|yml|yaml)$' | xargs pnpm exec prettier --check

  type-check:
    name: TypeScript Check
    runs-on: ubuntu-latest
    needs: setup
    if: needs.setup.outputs.has-app-changes == 'true' || needs.setup.outputs.has-package-changes == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Restore dependencies
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Restore Turbo cache
        uses: actions/cache@v4
        with:
          path: |
            .turbo
            apps/**/.turbo
            packages/**/.turbo
          key: ${{ runner.os }}-turbo-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-turbo-

      - name: Type check
        run: pnpm type-check

  # =========================================
  # BUILD VALIDATION
  # =========================================
  build:
    name: Build Validation
    runs-on: ubuntu-latest
    needs: setup
    if: needs.setup.outputs.has-app-changes == 'true' || needs.setup.outputs.has-package-changes == 'true'
    outputs:
      build-success: ${{ steps.build.outcome == 'success' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Restore dependencies
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Restore Turbo cache
        uses: actions/cache@v4
        with:
          path: |
            .turbo
            apps/**/.turbo
            packages/**/.turbo
          key: ${{ runner.os }}-turbo-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-turbo-

      - name: Build project
        id: build
        run: pnpm build
        env:
          NODE_ENV: production
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}

      - name: Cache build artifacts
        uses: actions/cache@v4
        with:
          path: |
            apps/web/.next
            apps/web/dist
            packages/*/dist
          key: ${{ runner.os }}-build-${{ github.sha }}

      - name: Analyze bundle size
        run: |
          cd apps/web
          if [ -d ".next" ]; then
            echo "### Bundle Analysis 📦" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            du -sh .next >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          fi

  # =========================================
  # TESTS
  # =========================================
  test-unit:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: [setup, build]
    if: needs.setup.outputs.has-app-changes == 'true' || needs.setup.outputs.has-package-changes == 'true' || needs.setup.outputs.has-test-changes == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Restore dependencies
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run unit tests
        run: pnpm test:unit --coverage
        env:
          NODE_ENV: test
          VITEST_CI: true

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: coverage/lcov.info
          flags: unit-tests
          name: unit-tests-coverage

  test-integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [setup, build]
    if: needs.setup.outputs.has-app-changes == 'true' || needs.setup.outputs.has-package-changes == 'true' || needs.setup.outputs.has-db-changes == 'true'
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: nutricoach_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Restore dependencies
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Setup test database
        run: |
          pnpm exec supabase start --ignore-health-check
          pnpm exec supabase db reset --debug
        env:
          SUPABASE_TEST_URL: postgresql://postgres:postgres@localhost:5432/nutricoach_test
          SUPABASE_TEST_ANON_KEY: ${{ secrets.SUPABASE_TEST_ANON_KEY }}

      - name: Run integration tests
        run: pnpm test:integration --coverage
        env:
          NODE_ENV: test
          VITEST_CI: true
          SUPABASE_TEST_URL: postgresql://postgres:postgres@localhost:5432/nutricoach_test
          SUPABASE_TEST_ANON_KEY: ${{ secrets.SUPABASE_TEST_ANON_KEY }}

      - name: Upload integration coverage
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: coverage/lcov.info
          flags: integration-tests
          name: integration-tests-coverage

  test-e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [setup, build]
    if: needs.setup.outputs.has-app-changes == 'true' && github.event_name == 'pull_request'
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: nutricoach_e2e
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Restore dependencies
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Restore build artifacts
        uses: actions/cache@v4
        with:
          path: |
            apps/web/.next
            apps/web/dist
            packages/*/dist
          key: ${{ runner.os }}-build-${{ github.sha }}

      - name: Setup E2E database
        run: |
          pnpm exec supabase start --ignore-health-check
          pnpm exec supabase db reset --debug
        env:
          SUPABASE_TEST_URL: postgresql://postgres:postgres@localhost:5432/nutricoach_e2e

      - name: Start application
        run: |
          pnpm start &
          sleep 10
          curl -f http://localhost:3000/api/health || exit 1
        env:
          NODE_ENV: test
          NEXT_PUBLIC_SUPABASE_URL: http://localhost:54321
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_TEST_ANON_KEY }}

      - name: Run E2E tests
        run: pnpm test:e2e
        env:
          NODE_ENV: test
          BASE_URL: http://localhost:3000

      - name: Upload E2E test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-test-results
          path: test-results/
          retention-days: 7

  # =========================================
  # SECURITY AUDIT
  # =========================================
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Restore dependencies
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run security audit
        run: |
          pnpm audit --audit-level moderate
          echo "### Security Audit Results 🔒" >> $GITHUB_STEP_SUMMARY
          pnpm audit --audit-level moderate >> $GITHUB_STEP_SUMMARY || true

      - name: Check for known vulnerabilities
        run: |
          if pnpm audit --audit-level high --json > audit-results.json; then
            echo "No high-severity vulnerabilities found ✅"
          else
            echo "❌ High-severity vulnerabilities detected!"
            cat audit-results.json
            exit 1
          fi

  # =========================================
  # QUALITY GATE
  # =========================================
  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [lint, type-check, build, test-unit, test-integration, security-audit]
    if: always()
    steps:
      - name: Check all jobs status
        run: |
          echo "### CI Pipeline Results 📊" >> $GITHUB_STEP_SUMMARY
          
          # Check job results
          LINT_STATUS="${{ needs.lint.result }}"
          TYPECHECK_STATUS="${{ needs.type-check.result }}"
          BUILD_STATUS="${{ needs.build.result }}"
          UNIT_TEST_STATUS="${{ needs.test-unit.result }}"
          INTEGRATION_TEST_STATUS="${{ needs.test-integration.result }}"
          SECURITY_STATUS="${{ needs.security-audit.result }}"
          
          echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Lint | $([[ $LINT_STATUS == 'success' ]] && echo '✅' || echo '❌') |" >> $GITHUB_STEP_SUMMARY
          echo "| TypeScript | $([[ $TYPECHECK_STATUS == 'success' ]] && echo '✅' || echo '❌') |" >> $GITHUB_STEP_SUMMARY
          echo "| Build | $([[ $BUILD_STATUS == 'success' ]] && echo '✅' || echo '❌') |" >> $GITHUB_STEP_SUMMARY
          echo "| Unit Tests | $([[ $UNIT_TEST_STATUS == 'success' ]] && echo '✅' || echo '❌') |" >> $GITHUB_STEP_SUMMARY
          echo "| Integration Tests | $([[ $INTEGRATION_TEST_STATUS == 'success' ]] && echo '✅' || echo '❌') |" >> $GITHUB_STEP_SUMMARY
          echo "| Security | $([[ $SECURITY_STATUS == 'success' ]] && echo '✅' || echo '❌') |" >> $GITHUB_STEP_SUMMARY
          
          # Fail if any critical job failed
          if [[ $LINT_STATUS == 'failure' || $TYPECHECK_STATUS == 'failure' || $BUILD_STATUS == 'failure' || $SECURITY_STATUS == 'failure' ]]; then
            echo "❌ Quality gate failed - critical checks did not pass"
            exit 1
          fi
          
          # Warning for test failures (but don't fail the pipeline)
          if [[ $UNIT_TEST_STATUS == 'failure' || $INTEGRATION_TEST_STATUS == 'failure' ]]; then
            echo "⚠️ Quality gate passed with test warnings"
          else
            echo "✅ Quality gate passed - all checks successful"
          fi

  # =========================================
  # NOTIFICATIONS
  # =========================================
  notify:
    name: Notifications
    runs-on: ubuntu-latest
    needs: [quality-gate]
    if: always() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    steps:
      - name: Notify Slack on success
        if: needs.quality-gate.result == 'success'
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_CHANNEL: '#nutricoach-ci'
          SLACK_COLOR: good
          SLACK_MESSAGE: |
            ✅ CI Pipeline succeeded for ${{ github.ref_name }}
            📝 Commit: ${{ github.event.head_commit.message }}
            👤 Author: ${{ github.event.head_commit.author.name }}
            🔗 [View Details](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})

      - name: Notify Slack on failure
        if: needs.quality-gate.result == 'failure'
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_CHANNEL: '#nutricoach-ci'
          SLACK_COLOR: danger
          SLACK_MESSAGE: |
            ❌ CI Pipeline failed for ${{ github.ref_name }}
            📝 Commit: ${{ github.event.head_commit.message }}
            👤 Author: ${{ github.event.head_commit.author.name }}
            🔗 [View Details](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})

      - name: Notify Discord
        if: always() && secrets.DISCORD_WEBHOOK_URL
        uses: Ilshidur/action-discord@master
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK_URL }}
          DISCORD_USERNAME: NutriCoach CI
          DISCORD_AVATAR: https://github.com/github.png
        with:
          args: |
            ${{ needs.quality-gate.result == 'success' && '✅' || '❌' }} **CI Pipeline ${{ needs.quality-gate.result }}** 
            **Branch:** `${{ github.ref_name }}`
            **Commit:** ${{ github.event.head_commit.message }}
            **Author:** ${{ github.event.head_commit.author.name }}
            [View Details](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})