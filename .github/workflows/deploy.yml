name: Deploy to Production

on:
  push:
    branches: [main]
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
  TURBO_TEAM: ${{ secrets.TURBO_TEAM }}
  NODE_VERSION: '18'
  PNPM_VERSION: '8'

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: false

jobs:
  # =========================================
  # ENVIRONMENT SETUP
  # =========================================
  setup-environment:
    name: Setup Environment
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.env.outputs.environment }}
      vercel-project-id: ${{ steps.env.outputs.vercel-project-id }}
      supabase-project-ref: ${{ steps.env.outputs.supabase-project-ref }}
      deploy-url: ${{ steps.env.outputs.deploy-url }}
    steps:
      - name: Determine environment
        id: env
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            ENVIRONMENT="${{ github.event.inputs.environment }}"
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            ENVIRONMENT="production"
          else
            ENVIRONMENT="staging"
          fi
          
          echo "environment=$ENVIRONMENT" >> $GITHUB_OUTPUT
          
          if [[ "$ENVIRONMENT" == "production" ]]; then
            echo "vercel-project-id=${{ secrets.VERCEL_PROJECT_ID_PROD }}" >> $GITHUB_OUTPUT
            echo "supabase-project-ref=${{ secrets.SUPABASE_PROJECT_REF_PROD }}" >> $GITHUB_OUTPUT
            echo "deploy-url=https://nutricoach.vercel.app" >> $GITHUB_OUTPUT
          else
            echo "vercel-project-id=${{ secrets.VERCEL_PROJECT_ID_STAGING }}" >> $GITHUB_OUTPUT
            echo "supabase-project-ref=${{ secrets.SUPABASE_PROJECT_REF_STAGING }}" >> $GITHUB_OUTPUT
            echo "deploy-url=https://nutricoach-staging.vercel.app" >> $GITHUB_OUTPUT
          fi

  # =========================================
  # PRE-DEPLOYMENT CHECKS
  # =========================================
  pre-deploy-checks:
    name: Pre-deployment Checks
    runs-on: ubuntu-latest
    needs: setup-environment
    environment: 
      name: ${{ needs.setup-environment.outputs.environment }}
      url: ${{ needs.setup-environment.outputs.deploy-url }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run full test suite
        run: |
          pnpm test:unit
          pnpm test:integration
        env:
          NODE_ENV: test
          VITEST_CI: true

      - name: Build application
        run: pnpm build
        env:
          NODE_ENV: production
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}

      - name: Run security audit
        run: pnpm audit --audit-level high

      - name: Cache build artifacts
        uses: actions/cache@v4
        with:
          path: |
            apps/web/.next
            apps/web/dist
            packages/*/dist
          key: deploy-build-${{ github.sha }}

  # =========================================
  # DATABASE MIGRATIONS
  # =========================================
  database-migrations:
    name: Database Migrations
    runs-on: ubuntu-latest
    needs: [setup-environment, pre-deploy-checks]
    if: needs.setup-environment.outputs.environment == 'production'
    environment: 
      name: production-db
      url: https://supabase.com/dashboard/project/${{ needs.setup-environment.outputs.supabase-project-ref }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Create database backup
        run: |
          echo "Creating database backup before migration..."
          supabase db dump --db-url "${{ secrets.SUPABASE_DB_URL }}" --file backup-$(date +%Y%m%d-%H%M%S).sql
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}

      - name: Run database migrations
        run: |
          supabase db push --project-ref ${{ needs.setup-environment.outputs.supabase-project-ref }}
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}

      - name: Verify migrations
        run: |
          echo "Verifying database state after migrations..."
          supabase db diff --project-ref ${{ needs.setup-environment.outputs.supabase-project-ref }}
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}

  # =========================================
  # VERCEL DEPLOYMENT
  # =========================================
  deploy-vercel:
    name: Deploy to Vercel
    runs-on: ubuntu-latest
    needs: [setup-environment, pre-deploy-checks]
    environment: 
      name: ${{ needs.setup-environment.outputs.environment }}
      url: ${{ needs.setup-environment.outputs.deploy-url }}
    outputs:
      deployment-url: ${{ steps.deploy.outputs.url }}
      deployment-id: ${{ steps.deploy.outputs.deployment-id }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Restore build artifacts
        uses: actions/cache@v4
        with:
          path: |
            apps/web/.next
            apps/web/dist
            packages/*/dist
          key: deploy-build-${{ github.sha }}

      - name: Install Vercel CLI
        run: npm install -g vercel@latest

      - name: Deploy to Vercel
        id: deploy
        working-directory: apps/web
        run: |
          if [[ "${{ needs.setup-environment.outputs.environment }}" == "production" ]]; then
            DEPLOYMENT_URL=$(vercel --prod --token ${{ secrets.VERCEL_TOKEN }} --confirm)
          else
            DEPLOYMENT_URL=$(vercel --token ${{ secrets.VERCEL_TOKEN }} --confirm)
          fi
          
          echo "url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
          echo "deployment-id=$(vercel ls --token ${{ secrets.VERCEL_TOKEN }} | head -1 | awk '{print $1}')" >> $GITHUB_OUTPUT
          
          echo "### Deployment Successful üöÄ" >> $GITHUB_STEP_SUMMARY
          echo "**URL:** $DEPLOYMENT_URL" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ needs.setup-environment.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ needs.setup-environment.outputs.vercel-project-id }}

  # =========================================
  # POST-DEPLOYMENT HEALTH CHECKS
  # =========================================
  health-checks:
    name: Health Checks
    runs-on: ubuntu-latest
    needs: [setup-environment, deploy-vercel, database-migrations]
    if: always() && needs.deploy-vercel.result == 'success'
    steps:
      - name: Wait for deployment to be ready
        run: sleep 30

      - name: Check application health
        id: health
        run: |
          DEPLOY_URL="${{ needs.deploy-vercel.outputs.deployment-url }}"
          
          echo "Testing deployment at $DEPLOY_URL"
          
          # Health check endpoint
          if curl -f "$DEPLOY_URL/api/health"; then
            echo "‚úÖ Health check passed"
            echo "health-status=healthy" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Health check failed"
            echo "health-status=unhealthy" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          # Test response time
          RESPONSE_TIME=$(curl -w "%{time_total}" -s -o /dev/null "$DEPLOY_URL")
          echo "Response time: ${RESPONSE_TIME}s"
          
          if (( $(echo "$RESPONSE_TIME < 2.0" | bc -l) )); then
            echo "‚úÖ Response time acceptable: ${RESPONSE_TIME}s"
          else
            echo "‚ö†Ô∏è Response time slow: ${RESPONSE_TIME}s"
          fi
          
          echo "### Health Check Results ‚ù§Ô∏è" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** Healthy ‚úÖ" >> $GITHUB_STEP_SUMMARY
          echo "**Response Time:** ${RESPONSE_TIME}s" >> $GITHUB_STEP_SUMMARY
          echo "**URL:** $DEPLOY_URL" >> $GITHUB_STEP_SUMMARY

      - name: Test critical endpoints
        run: |
          DEPLOY_URL="${{ needs.deploy-vercel.outputs.deployment-url }}"
          
          # Test API endpoints
          echo "Testing critical API endpoints..."
          
          endpoints=(
            "/api/health"
            "/api/auth/me" 
            "/api/recipes"
          )
          
          for endpoint in "${endpoints[@]}"; do
            echo "Testing $endpoint"
            if curl -f -s "$DEPLOY_URL$endpoint" > /dev/null; then
              echo "‚úÖ $endpoint - OK"
            else
              echo "‚ö†Ô∏è $endpoint - Failed (may be expected for auth endpoints)"
            fi
          done

      - name: Performance baseline
        run: |
          DEPLOY_URL="${{ needs.deploy-vercel.outputs.deployment-url }}"
          
          echo "Running performance baseline..."
          
          # Lighthouse CI would go here in a real scenario
          # For now, we'll do basic timing
          
          START_TIME=$(date +%s.%N)
          curl -s "$DEPLOY_URL" > /dev/null
          END_TIME=$(date +%s.%N)
          
          LOAD_TIME=$(echo "$END_TIME - $START_TIME" | bc)
          echo "Page load time: ${LOAD_TIME}s" 
          
          if (( $(echo "$LOAD_TIME < 3.0" | bc -l) )); then
            echo "‚úÖ Page load time acceptable"
          else
            echo "‚ö†Ô∏è Page load time slow: ${LOAD_TIME}s"
          fi

  # =========================================
  # ROLLBACK ON FAILURE
  # =========================================
  rollback:
    name: Rollback on Failure
    runs-on: ubuntu-latest
    needs: [setup-environment, deploy-vercel, health-checks]
    if: failure() && needs.setup-environment.outputs.environment == 'production'
    steps:
      - name: Install Vercel CLI
        run: npm install -g vercel@latest

      - name: Get previous successful deployment
        id: previous
        run: |
          PREVIOUS_DEPLOYMENT=$(vercel ls --token ${{ secrets.VERCEL_TOKEN }} | grep "READY" | head -2 | tail -1 | awk '{print $1}')
          echo "previous-deployment=$PREVIOUS_DEPLOYMENT" >> $GITHUB_OUTPUT
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ needs.setup-environment.outputs.vercel-project-id }}

      - name: Promote previous deployment
        if: steps.previous.outputs.previous-deployment != ''
        run: |
          echo "Rolling back to deployment: ${{ steps.previous.outputs.previous-deployment }}"
          vercel promote ${{ steps.previous.outputs.previous-deployment }} --token ${{ secrets.VERCEL_TOKEN }}
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ needs.setup-environment.outputs.vercel-project-id }}

      - name: Notify rollback
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_CHANNEL: '#nutricoach-alerts'
          SLACK_COLOR: warning
          SLACK_MESSAGE: |
            üîÑ **ROLLBACK EXECUTED**
            **Environment:** ${{ needs.setup-environment.outputs.environment }}
            **Reason:** Deployment health checks failed
            **Previous Deployment:** ${{ steps.previous.outputs.previous-deployment }}
            **Action Required:** Manual investigation needed

  # =========================================
  # CREATE RELEASE
  # =========================================
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [setup-environment, deploy-vercel, health-checks]
    if: needs.setup-environment.outputs.environment == 'production' && needs.health-checks.result == 'success'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version
        id: version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=v$VERSION" >> $GITHUB_OUTPUT

      - name: Generate changelog
        id: changelog
        run: |
          # Get commits since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [[ -n "$LAST_TAG" ]]; then
            CHANGELOG=$(git log $LAST_TAG..HEAD --pretty=format:"- %s (%h)" --no-merges)
          else
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" --no-merges -10)
          fi
          
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.version }}-${{ github.run_number }}
          release_name: NutriCoach ${{ steps.version.outputs.version }}
          body: |
            ## üöÄ Deployment Information
            
            **Environment:** Production  
            **Deployment URL:** ${{ needs.deploy-vercel.outputs.deployment-url }}
            **Deployment ID:** ${{ needs.deploy-vercel.outputs.deployment-id }}
            **Health Status:** ${{ needs.health-checks.outputs.health-status }}
            
            ## üìù Changes
            
            ${{ steps.changelog.outputs.changelog }}
            
            ## üîß Technical Details
            
            - Build: `${{ github.sha }}`
            - Node.js: ${{ env.NODE_VERSION }}
            - Next.js: Latest
            - Database: Supabase
            
            ---
            *Deployed automatically via GitHub Actions*
          draft: false
          prerelease: false

  # =========================================
  # NOTIFICATIONS
  # =========================================
  notify-deployment:
    name: Deployment Notifications
    runs-on: ubuntu-latest
    needs: [setup-environment, deploy-vercel, health-checks]
    if: always()
    steps:
      - name: Notify Slack Success
        if: needs.health-checks.result == 'success'
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_CHANNEL: '#nutricoach-deployments'
          SLACK_COLOR: good
          SLACK_MESSAGE: |
            üöÄ **Deployment Successful**
            
            **Environment:** ${{ needs.setup-environment.outputs.environment }}
            **URL:** ${{ needs.deploy-vercel.outputs.deployment-url }}
            **Commit:** ${{ github.event.head_commit.message }}
            **Author:** ${{ github.event.head_commit.author.name }}
            **Health:** Healthy ‚úÖ
            
            [View Deployment](${{ needs.deploy-vercel.outputs.deployment-url }})

      - name: Notify Slack Failure
        if: failure()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_CHANNEL: '#nutricoach-alerts'
          SLACK_COLOR: danger
          SLACK_MESSAGE: |
            ‚ùå **Deployment Failed**
            
            **Environment:** ${{ needs.setup-environment.outputs.environment }}
            **Branch:** ${{ github.ref_name }}
            **Commit:** ${{ github.event.head_commit.message }}
            **Author:** ${{ github.event.head_commit.author.name }}
            
            **Action Required:** Check deployment logs and fix issues.
            [View Logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})

      - name: Notify Discord
        if: always() && secrets.DISCORD_WEBHOOK_URL
        uses: Ilshidur/action-discord@master
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK_URL }}
          DISCORD_USERNAME: NutriCoach Deploy
          DISCORD_AVATAR: https://github.com/github.png
        with:
          args: |
            ${{ needs.health-checks.result == 'success' && 'üöÄ' || '‚ùå' }} **Deployment ${{ needs.health-checks.result == 'success' && 'Successful' || 'Failed' }}**
            **Environment:** ${{ needs.setup-environment.outputs.environment }}
            **URL:** ${{ needs.deploy-vercel.outputs.deployment-url }}
            **Branch:** `${{ github.ref_name }}`