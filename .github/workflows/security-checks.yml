# üîí Comprehensive Security Checks Workflow
# Complete security validation for NutriCoach with environment isolation

name: üîí Security Checks

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Daily security scan at 3 AM UTC
    - cron: '0 3 * * *'
  workflow_dispatch:
    inputs:
      security_level:
        description: 'Security scan level'
        required: true
        default: 'standard'
        type: choice
        options:
          - quick
          - standard
          - comprehensive
      environment:
        description: 'Target environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

permissions:
  actions: read
  contents: read
  security-events: write
  pull-requests: write
  issues: write

env:
  NODE_VERSION: '20'
  SECURITY_SCAN_LEVEL: ${{ github.event.inputs.security_level || 'standard' }}
  TARGET_ENVIRONMENT: ${{ github.event.inputs.environment || 'staging' }}

jobs:
  # Job 1: Secret Detection and Validation
  secret-detection:
    name: üîç Secret Detection
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full history for historical secret scanning
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run TruffleHog secret scan
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified
          
      - name: Run GitLeaks secret scan
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          config-path: .gitleaks.toml
          
      - name: Validate environment secrets
        run: |
          echo "üîç Validating secrets for environment: ${{ env.TARGET_ENVIRONMENT }}"
          if [ -f "./scripts/security/validate-secrets.sh" ]; then
            chmod +x ./scripts/security/validate-secrets.sh
            ./scripts/security/validate-secrets.sh ${{ env.TARGET_ENVIRONMENT }}
          else
            echo "‚ö†Ô∏è Secret validation script not found"
          fi
          
      - name: Check for hardcoded secrets
        run: |
          echo "üîç Scanning for hardcoded secrets in source code..."
          
          # Check for common secret patterns
          secret_patterns=(
            "password\s*=\s*['\"][^'\"]*['\"]"
            "api_key\s*=\s*['\"][^'\"]*['\"]"
            "secret\s*=\s*['\"][^'\"]*['\"]"
            "token\s*=\s*['\"][^'\"]*['\"]"
            "key\s*=\s*['\"][^'\"]*['\"]"
            "AKIA[0-9A-Z]{16}"
            "sk_live_[0-9a-zA-Z]{24}"
            "sk_test_[0-9a-zA-Z]{24}"
          )
          
          found_secrets=false
          for pattern in "${secret_patterns[@]}"; do
            if grep -r -E "$pattern" --include="*.ts" --include="*.js" --include="*.tsx" --include="*.jsx" --exclude-dir=node_modules --exclude-dir=.git .; then
              echo "‚ùå Found potential secret: $pattern"
              found_secrets=true
            fi
          done
          
          if [ "$found_secrets" = true ]; then
            echo "‚ùå Hardcoded secrets detected! Please remove them."
            exit 1
          else
            echo "‚úÖ No hardcoded secrets found"
          fi
          
      - name: Upload secret scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: secret-scan-results
          path: |
            gitleaks-report.json
            trufflehog-results.json
          retention-days: 30

  # Job 2: Dependency Security Scanning
  dependency-scan:
    name: üì¶ Dependency Security
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run npm audit
        run: |
          echo "üîç Running npm audit..."
          npm audit --audit-level=moderate --json > npm-audit-results.json || true
          
          # Check for critical vulnerabilities
          critical_count=$(cat npm-audit-results.json | jq '.metadata.vulnerabilities.critical // 0')
          high_count=$(cat npm-audit-results.json | jq '.metadata.vulnerabilities.high // 0')
          
          echo "Critical vulnerabilities: $critical_count"
          echo "High vulnerabilities: $high_count"
          
          if [ "$critical_count" -gt 0 ]; then
            echo "‚ùå Critical vulnerabilities found!"
            npm audit --audit-level=critical
            exit 1
          elif [ "$high_count" -gt 3 ]; then
            echo "‚ö†Ô∏è Too many high-severity vulnerabilities found!"
            npm audit --audit-level=high
            exit 1
          else
            echo "‚úÖ Dependency security check passed"
          fi
          
      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --json-file-output=snyk-results.json
        continue-on-error: true
        
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
          
      - name: Run OSSAR security analysis
        uses: github/ossar-action@v1
        id: ossar
        
      - name: Upload OSSAR results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ${{ steps.ossar.outputs.sarifFile }}
          
      - name: Upload dependency scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: dependency-scan-results
          path: |
            npm-audit-results.json
            snyk-results.json
            trivy-results.sarif
          retention-days: 30

  # Job 3: Code Security Analysis
  code-analysis:
    name: üîé Code Security Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript-typescript
          queries: security-extended,security-and-quality
          
      - name: Autobuild
        uses: github/codeql-action/autobuild@v3
        
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:javascript-typescript"
          
      - name: Setup Node.js for additional scans
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run Semgrep security scan
        uses: securecodewarrior/github-action-add-sarif@v1
        with:
          sarif-file: semgrep-results.sarif
        env:
          SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}
        continue-on-error: true
        
      - name: Run ESLint security rules
        run: |
          echo "üîç Running ESLint security analysis..."
          npx eslint . --ext .ts,.tsx,.js,.jsx \
            --config .eslintrc.security.js \
            --format json \
            --output-file eslint-security-results.json || true
            
          # Check for security issues
          security_errors=$(cat eslint-security-results.json | jq '[.[] | .messages[] | select(.severity == 2)] | length')
          echo "Security errors found: $security_errors"
          
          if [ "$security_errors" -gt 0 ]; then
            echo "‚ùå Security issues found in code!"
            cat eslint-security-results.json | jq '.[] | .messages[] | select(.severity == 2)'
            exit 1
          else
            echo "‚úÖ ESLint security check passed"
          fi
          
      - name: Upload code analysis results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: code-analysis-results
          path: |
            eslint-security-results.json
            semgrep-results.sarif
          retention-days: 30

  # Job 4: Infrastructure Security
  infrastructure-security:
    name: üèóÔ∏è Infrastructure Security
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Scan Terraform/IaC files
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'config'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-iac-results.sarif'
        continue-on-error: true
        
      - name: Upload Terraform scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-iac-results.sarif'
          
      - name: Validate GitHub Actions workflows
        run: |
          echo "üîç Validating GitHub Actions security..."
          
          # Check for dangerous patterns in workflows
          dangerous_patterns=(
            "runs-on.*\${{.*}}"
            "env:.*\${{.*github\.event\.(issue|pull_request)\..*}}"
            "curl.*\${{.*github\.event\..*}}"
            "eval.*\${{.*}}"
          )
          
          found_issues=false
          for pattern in "${dangerous_patterns[@]}"; do
            if find .github/workflows -name "*.yml" -o -name "*.yaml" | xargs grep -l "$pattern"; then
              echo "‚ùå Dangerous pattern found in workflows: $pattern"
              found_issues=true
            fi
          done
          
          if [ "$found_issues" = true ]; then
            echo "‚ùå Security issues found in GitHub Actions workflows!"
            exit 1
          else
            echo "‚úÖ GitHub Actions workflows security check passed"
          fi
          
      - name: Validate container security
        run: |
          echo "üîç Checking for container security best practices..."
          
          # Check Dockerfile security if it exists
          if [ -f "Dockerfile" ]; then
            echo "Checking Dockerfile security..."
            
            # Check for running as root
            if grep -q "USER root" Dockerfile; then
              echo "‚ö†Ô∏è Container runs as root - consider using non-root user"
            fi
            
            # Check for latest tags
            if grep -q ":latest" Dockerfile; then
              echo "‚ö†Ô∏è Using 'latest' tag - consider pinning specific versions"
            fi
            
            echo "‚úÖ Container security check completed"
          else
            echo "‚ÑπÔ∏è No Dockerfile found"
          fi

  # Job 5: Database Security
  database-security:
    name: üóÑÔ∏è Database Security
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Validate SQL migrations
        run: |
          echo "üîç Validating SQL migration security..."
          
          # Check for dangerous SQL patterns
          dangerous_sql_patterns=(
            "DROP\s+DATABASE"
            "DROP\s+SCHEMA"
            "TRUNCATE\s+TABLE"
            "DELETE\s+FROM.*WITHOUT.*WHERE"
            "UPDATE.*WITHOUT.*WHERE"
            "GRANT\s+ALL"
            "DISABLE\s+TRIGGER"
            "SET\s+sql_mode"
            "LOAD\s+DATA"
            "INTO\s+OUTFILE"
          )
          
          found_issues=false
          if [ -d "supabase/migrations" ]; then
            for pattern in "${dangerous_sql_patterns[@]}"; do
              if find supabase/migrations -name "*.sql" | xargs grep -i "$pattern"; then
                echo "‚ö†Ô∏è Potentially dangerous SQL pattern found: $pattern"
                found_issues=true
              fi
            done
          fi
          
          if [ "$found_issues" = true ]; then
            echo "‚ö†Ô∏è Review SQL migrations for potential security issues"
          else
            echo "‚úÖ SQL migration security check passed"
          fi
          
      - name: Check Supabase RLS policies
        run: |
          echo "üîç Validating Supabase Row Level Security policies..."
          
          # Check if RLS policies are defined
          if [ -d "supabase" ]; then
            rls_files=$(find supabase -name "*.sql" | xargs grep -l "CREATE POLICY\|ALTER TABLE.*ENABLE ROW LEVEL SECURITY" || true)
            
            if [ -z "$rls_files" ]; then
              echo "‚ö†Ô∏è No RLS policies found - ensure sensitive data is protected"
            else
              echo "‚úÖ RLS policies found: $rls_files"
            fi
          fi
          
      - name: Validate database schema
        run: |
          echo "üîç Validating database schema security..."
          
          # Run schema validation if script exists
          if [ -f "./scripts/security/validate-db-schema.sh" ]; then
            chmod +x ./scripts/security/validate-db-schema.sh
            ./scripts/security/validate-db-schema.sh
          else
            echo "‚ÑπÔ∏è Database schema validation script not found"
          fi

  # Job 6: API Security Testing
  api-security:
    name: üåê API Security Testing
    runs-on: ubuntu-latest
    timeout-minutes: 25
    if: github.event_name != 'schedule' || inputs.security_level == 'comprehensive'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build application
        run: npm run build
        
      - name: Start application for testing
        run: |
          npm run start &
          APP_PID=$!
          echo "APP_PID=$APP_PID" >> $GITHUB_ENV
          
          # Wait for app to start
          timeout 60 bash -c 'until curl -f http://localhost:3000/api/health; do sleep 2; done'
          
      - name: Run OWASP ZAP baseline scan
        uses: zaproxy/action-baseline@v0.10.0
        with:
          target: 'http://localhost:3000'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a -j -m 10 -T 5'
          
      - name: Validate API endpoints security
        run: |
          echo "üîç Testing API endpoint security..."
          
          # Test common security headers
          endpoints=("/api/health" "/api/auth/me" "/api/blog")
          
          for endpoint in "${endpoints[@]}"; do
            echo "Testing endpoint: $endpoint"
            
            response=$(curl -s -I "http://localhost:3000$endpoint" || echo "Failed to connect")
            
            # Check for security headers
            if echo "$response" | grep -q "X-Frame-Options"; then
              echo "‚úÖ X-Frame-Options header present"
            else
              echo "‚ö†Ô∏è X-Frame-Options header missing"
            fi
            
            if echo "$response" | grep -q "X-Content-Type-Options"; then
              echo "‚úÖ X-Content-Type-Options header present"
            else
              echo "‚ö†Ô∏è X-Content-Type-Options header missing"
            fi
            
            if echo "$response" | grep -q "Content-Security-Policy"; then
              echo "‚úÖ Content-Security-Policy header present"
            else
              echo "‚ö†Ô∏è Content-Security-Policy header missing"
            fi
          done
          
      - name: Test authentication endpoints
        run: |
          echo "üîç Testing authentication security..."
          
          # Test rate limiting on auth endpoints
          auth_endpoints=("/api/auth/signin" "/api/auth/signup")
          
          for endpoint in "${auth_endpoints[@]}"; do
            echo "Testing rate limiting on: $endpoint"
            
            # Make multiple rapid requests
            for i in {1..10}; do
              curl -s -o /dev/null -w "%{http_code}\n" \
                -X POST "http://localhost:3000$endpoint" \
                -H "Content-Type: application/json" \
                -d '{"email":"test@test.com","password":"test"}'
            done
          done
          
      - name: Cleanup
        if: always()
        run: |
          if [ -n "$APP_PID" ]; then
            kill $APP_PID || true
          fi

  # Job 7: Compliance Validation
  compliance-check:
    name: üìã Compliance Validation
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Validate GDPR compliance
        run: |
          echo "üîç Validating GDPR compliance..."
          
          # Check for privacy policy
          if [ -f "PRIVACY.md" ] || [ -f "docs/privacy-policy.md" ]; then
            echo "‚úÖ Privacy policy found"
          else
            echo "‚ö†Ô∏è Privacy policy not found"
          fi
          
          # Check for data protection measures in code
          gdpr_patterns=(
            "consent"
            "data-protection"
            "right-to-be-forgotten"
            "data-portability"
            "privacy-by-design"
          )
          
          found_gdpr=false
          for pattern in "${gdpr_patterns[@]}"; do
            if grep -r "$pattern" --include="*.ts" --include="*.tsx" --exclude-dir=node_modules .; then
              found_gdpr=true
              break
            fi
          done
          
          if [ "$found_gdpr" = true ]; then
            echo "‚úÖ GDPR compliance measures found in code"
          else
            echo "‚ö†Ô∏è Consider implementing GDPR compliance measures"
          fi
          
      - name: Validate security headers
        run: |
          echo "üîç Validating security header configuration..."
          
          # Check Next.js config for security headers
          if [ -f "next.config.js" ] || [ -f "next.config.ts" ]; then
            if grep -q "X-Frame-Options\|Content-Security-Policy\|X-Content-Type-Options" next.config.*; then
              echo "‚úÖ Security headers configured"
            else
              echo "‚ö†Ô∏è Security headers not configured in Next.js config"
            fi
          fi
          
      - name: Check for security documentation
        run: |
          echo "üîç Validating security documentation..."
          
          required_docs=(
            "SECURITY.md"
            "docs/SECURITY-GUIDE.md"
            ".github/SECURITY.md"
          )
          
          found_security_docs=false
          for doc in "${required_docs[@]}"; do
            if [ -f "$doc" ]; then
              echo "‚úÖ Security documentation found: $doc"
              found_security_docs=true
            fi
          done
          
          if [ "$found_security_docs" = false ]; then
            echo "‚ö†Ô∏è Security documentation not found"
          fi

  # Job 8: Security Report Generation
  security-report:
    name: üìä Security Report
    runs-on: ubuntu-latest
    needs: [secret-detection, dependency-scan, code-analysis, infrastructure-security, database-security, api-security, compliance-check]
    if: always()
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: security-artifacts
          
      - name: Generate security report
        run: |
          echo "# üîí Security Scan Report" > security-report.md
          echo "" >> security-report.md
          echo "**Scan Date:** $(date)" >> security-report.md
          echo "**Environment:** ${{ env.TARGET_ENVIRONMENT }}" >> security-report.md
          echo "**Security Level:** ${{ env.SECURITY_SCAN_LEVEL }}" >> security-report.md
          echo "**Commit:** ${{ github.sha }}" >> security-report.md
          echo "" >> security-report.md
          
          echo "## Job Results" >> security-report.md
          echo "" >> security-report.md
          
          # Check job results
          jobs=("secret-detection" "dependency-scan" "code-analysis" "infrastructure-security" "database-security" "api-security" "compliance-check")
          
          for job in "${jobs[@]}"; do
            result="${{ needs[job].result }}"
            if [ "$result" = "success" ]; then
              echo "‚úÖ **$job**: Passed" >> security-report.md
            elif [ "$result" = "failure" ]; then
              echo "‚ùå **$job**: Failed" >> security-report.md
            elif [ "$result" = "skipped" ]; then
              echo "‚è≠Ô∏è **$job**: Skipped" >> security-report.md
            else
              echo "‚ö†Ô∏è **$job**: $result" >> security-report.md
            fi
          done
          
          echo "" >> security-report.md
          echo "## Recommendations" >> security-report.md
          echo "" >> security-report.md
          
          # Add recommendations based on failures
          if [[ "${{ needs.secret-detection.result }}" = "failure" ]]; then
            echo "üîç **Secret Detection**: Review and remove any detected secrets from the codebase." >> security-report.md
          fi
          
          if [[ "${{ needs.dependency-scan.result }}" = "failure" ]]; then
            echo "üì¶ **Dependencies**: Update vulnerable dependencies to secure versions." >> security-report.md
          fi
          
          if [[ "${{ needs.code-analysis.result }}" = "failure" ]]; then
            echo "üîé **Code Analysis**: Address security issues identified in code analysis." >> security-report.md
          fi
          
          echo "" >> security-report.md
          echo "---" >> security-report.md
          echo "*Generated by NutriCoach Security Pipeline*" >> security-report.md
          
      - name: Upload security report
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: security-report.md
          retention-days: 90
          
      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('security-report.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: report
            });
            
      - name: Create security issue on failure
        if: |
          always() && 
          (needs.secret-detection.result == 'failure' || 
           needs.dependency-scan.result == 'failure' || 
           needs.code-analysis.result == 'failure')
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('security-report.md', 'utf8');
            
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'üö® Security Issues Detected',
              body: `Security scan failed for commit ${context.sha}.\n\n${report}`,
              labels: ['security', 'critical']
            });

  # Job 9: Security Notification
  security-notification:
    name: üì¢ Security Notification
    runs-on: ubuntu-latest
    needs: [security-report]
    if: always() && github.event_name != 'pull_request'
    timeout-minutes: 5
    
    steps:
      - name: Notify security team
        if: |
          needs.secret-detection.result == 'failure' || 
          needs.dependency-scan.result == 'failure' || 
          needs.code-analysis.result == 'failure'
        uses: actions/github-script@v7
        with:
          script: |
            // Send notification to security team (implement based on your notification system)
            console.log('üö® Security issues detected - notifying security team');
            
            // Example: Send to Slack (requires SLACK_WEBHOOK_URL secret)
            if (process.env.SLACK_WEBHOOK_URL) {
              const message = {
                text: `üö® Security scan failed for ${context.repo.owner}/${context.repo.repo}`,
                blocks: [
                  {
                    type: "section",
                    text: {
                      type: "mrkdwn",
                      text: `*Security Alert*\n\nRepository: ${context.repo.owner}/${context.repo.repo}\nCommit: ${context.sha}\nBranch: ${context.ref}\n\nPlease review the security scan results immediately.`
                    }
                  }
                ]
              };
              
              // Send to Slack (you would implement this call)
              console.log('Slack notification payload:', JSON.stringify(message, null, 2));
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}