# ü§ñ NutriCoach Multi-Agent System - Makefile
# Commandes simplifi√©es pour l'orchestration des agents

.PHONY: help setup install test validate clean start status monitor dashboard report generate templates features cache-stats cache-clear cache-search

# Configuration
FEATURE ?= 
SPEC_FILE ?= specs/nutricoach-features.json
FORMAT ?= md
QUERY ?= react

# Couleurs pour l'affichage
BLUE := \033[34m
GREEN := \033[32m
YELLOW := \033[33m
RED := \033[31m
RESET := \033[0m

help: ## Afficher l'aide
	@echo "$(BLUE)ü§ñ NutriCoach Multi-Agent System$(RESET)"
	@echo "$(BLUE)================================$(RESET)"
	@echo ""
	@echo "$(YELLOW)üìã COMMANDES PRINCIPALES:$(RESET)"
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "  $(GREEN)%-15s$(RESET) %s\n", $$1, $$2}'
	@echo ""
	@echo "$(YELLOW)üí° EXEMPLES:$(RESET)"
	@echo "  make start FEATURE=nutrition-tracking    # D√©marrer une feature sp√©cifique"
	@echo "  make test                                # Tests complets du syst√®me"
	@echo "  make monitor                             # Monitoring en temps r√©el"
	@echo "  make report FORMAT=html                  # Rapport en HTML"

setup: ## Initialiser le syst√®me (premi√®re utilisation)
	@echo "$(BLUE)üöÄ Setup du syst√®me multi-agents...$(RESET)"
	@npm install
	@node setup.js
	@echo "$(GREEN)‚úÖ Setup termin√©!$(RESET)"

install: setup ## Alias pour setup

test: ## Ex√©cuter tous les tests du syst√®me
	@echo "$(BLUE)üß™ Tests du syst√®me...$(RESET)"
	@node test-system.js
	@echo "$(GREEN)‚úÖ Tests termin√©s$(RESET)"

validate: ## Valider les sp√©cifications de features
	@echo "$(BLUE)üîç Validation des sp√©cifications...$(RESET)"
	@node cli.js validate --file $(SPEC_FILE)

list: ## Lister toutes les features disponibles
	@echo "$(BLUE)üìã Features disponibles:$(RESET)"
	@node cli.js list --spec $(SPEC_FILE)

start: ## D√©marrer l'orchestration d'une feature
ifdef FEATURE
	@echo "$(BLUE)üöÄ D√©marrage feature: $(FEATURE)$(RESET)"
	@node cli.js start --feature $(FEATURE) --spec $(SPEC_FILE)
else
	@echo "$(BLUE)üöÄ D√©marrage interactif...$(RESET)"
	@node cli.js start --spec $(SPEC_FILE)
endif

start-dry: ## Simulation (dry-run) d'une feature
ifdef FEATURE
	@echo "$(YELLOW)üèÉ Simulation feature: $(FEATURE)$(RESET)"
	@node cli.js start --feature $(FEATURE) --dry-run --spec $(SPEC_FILE)
else
	@echo "$(RED)‚ùå Sp√©cifiez une feature: make start-dry FEATURE=nom-feature$(RESET)"
endif

status: ## Afficher le statut des agents
	@echo "$(BLUE)üìä Statut des agents:$(RESET)"
	@node cli.js status

status-watch: ## Monitoring du statut en continu
	@echo "$(BLUE)üëÄ Surveillance continue (Ctrl+C pour arr√™ter)$(RESET)"
	@node cli.js status --watch

monitor: ## Monitoring avanc√© en temps r√©el
	@echo "$(BLUE)üìä Monitoring avanc√© (Ctrl+C pour arr√™ter)$(RESET)"
	@node cli.js monitor

dashboard: ## Dashboard de monitoring interactif
	@echo "$(BLUE)üìä Dashboard de monitoring interactif$(RESET)"
	@node cli.js dashboard

clean: ## Nettoyer les caches et fichiers temporaires
	@echo "$(BLUE)üßπ Nettoyage...$(RESET)"
	@node cli.js clean
	@echo "$(GREEN)‚úÖ Nettoyage termin√©$(RESET)"

clean-all: ## Nettoyage complet (incluant node_modules)
	@echo "$(BLUE)üßπ Nettoyage complet...$(RESET)"
	@node cli.js clean --all
	@rm -rf node_modules
	@rm -rf logs/*
	@rm -rf tmp/*
	@echo "$(GREEN)‚úÖ Nettoyage complet termin√©$(RESET)"

report: ## G√©n√©rer un rapport d'activit√©
	@echo "$(BLUE)üìä G√©n√©ration rapport $(FORMAT)...$(RESET)"
	@node cli.js report --format $(FORMAT)
	@echo "$(GREEN)‚úÖ Rapport g√©n√©r√©$(RESET)"

# G√©n√©ration de features
generate: ## G√©n√©rer une nouvelle feature (mode interactif)
	@echo "$(BLUE)üéØ G√©n√©rateur de features...$(RESET)"
	@node cli.js generate

generate-crud: ## G√©n√©rer une feature CRUD
	@echo "$(BLUE)üìã G√©n√©ration feature CRUD...$(RESET)"
	@node cli.js generate --template crud

generate-ai: ## G√©n√©rer une feature IA
	@echo "$(BLUE)ü§ñ G√©n√©ration feature IA...$(RESET)"
	@node cli.js generate --template ai

generate-ui: ## G√©n√©rer une feature UI
	@echo "$(BLUE)üé® G√©n√©ration feature UI...$(RESET)"
	@node cli.js generate --template ui

generate-api: ## G√©n√©rer une feature API
	@echo "$(BLUE)üîå G√©n√©ration feature API...$(RESET)"
	@node cli.js generate --template api

generate-security: ## G√©n√©rer une feature s√©curit√©
	@echo "$(BLUE)üîí G√©n√©ration feature s√©curit√©...$(RESET)"
	@node cli.js generate --template security

templates: ## Lister les templates disponibles
	@echo "$(BLUE)üìã Templates disponibles:$(RESET)"
	@node cli.js templates

features: ## Lister toutes les features g√©n√©r√©es
	@echo "$(BLUE)üìä Features g√©n√©r√©es:$(RESET)"
	@node cli.js features

# Gestion du cache Context7
cache-stats: ## Afficher les statistiques du cache Context7
	@echo "$(BLUE)üìä Statistiques du cache Context7:$(RESET)"
	@node cli.js cache --stats

cache-clear: ## Nettoyer le cache Context7
	@echo "$(BLUE)üßπ Nettoyage du cache Context7:$(RESET)"
	@node cli.js cache --clear

cache-search: ## Rechercher dans le cache Context7 (usage: make cache-search QUERY="search term")
	@echo "$(BLUE)üîç Recherche dans le cache Context7:$(RESET)"
	@node cli.js cache --search "$(QUERY)"

# Agents individuels
db-agent: ## Ex√©cuter le DB Agent individuellement
	@echo "$(BLUE)üóÑÔ∏è DB Agent...$(RESET)"
	@node cli.js agent --type db

ui-agent: ## Ex√©cuter l'UI Agent individuellement
	@echo "$(BLUE)üé® UI Agent...$(RESET)"
	@node cli.js agent --type ui

module-agent: ## Ex√©cuter le Module Agent individuellement
	@echo "$(BLUE)‚öôÔ∏è Module Agent...$(RESET)"
	@node cli.js agent --type module

qa-agent: ## Ex√©cuter le QA Agent individuellement
	@echo "$(BLUE)üß™ QA Agent...$(RESET)"
	@node cli.js agent --type qa

doc-agent: ## Ex√©cuter le Doc Agent individuellement
	@echo "$(BLUE)üìö Doc Agent...$(RESET)"
	@node cli.js agent --type doc

# Tests sp√©cifiques
test-specs: ## Tester uniquement la validation des specs
	@echo "$(BLUE)üß™ Test validation specs...$(RESET)"
	@node test-system.js "validation"

test-agents: ## Tester uniquement l'initialisation des agents
	@echo "$(BLUE)üß™ Test initialisation agents...$(RESET)"
	@node test-system.js "initialisation"

test-communication: ## Tester la communication inter-agents
	@echo "$(BLUE)üß™ Test communication...$(RESET)"
	@node test-system.js "communication"

# Exemples et d√©mos
demo: ## D√©mo compl√®te du syst√®me
	@echo "$(BLUE)üé¨ D√©mo du syst√®me multi-agents$(RESET)"
	@echo "$(YELLOW)1. Validation des specs...$(RESET)"
	@make validate
	@echo ""
	@echo "$(YELLOW)2. Liste des features...$(RESET)"
	@make list
	@echo ""
	@echo "$(YELLOW)3. Simulation d'une feature...$(RESET)"
	@make start-dry FEATURE=nutrition-tracking
	@echo ""
	@echo "$(GREEN)üéâ D√©mo termin√©e!$(RESET)"

example-simple: ## Ex√©cuter l'exemple simple
	@echo "$(BLUE)üìù Exemple simple...$(RESET)"
	@node cli.js start --feature "nutrition-tracking" --dry-run

example-ai: ## Ex√©cuter l'exemple avec IA
	@echo "$(BLUE)ü§ñ Exemple avec IA...$(RESET)"
	@node cli.js start --feature "recipe-recommendation-ai" --dry-run

# D√©veloppement
dev: ## Mode d√©veloppement avec rechargement automatique
	@echo "$(BLUE)üîß Mode d√©veloppement...$(RESET)"
	@npm run dev

lint: ## V√©rifier le code (ESLint si configur√©)
	@echo "$(BLUE)üîç V√©rification du code...$(RESET)"
	@npm run lint 2>/dev/null || echo "$(YELLOW)‚ö†Ô∏è ESLint non configur√©$(RESET)"

# Documentation
docs: ## G√©n√©rer la documentation
	@echo "$(BLUE)üìö G√©n√©ration documentation...$(RESET)"
	@node cli.js agent --type doc --file examples/doc-task-example.json

readme: ## Afficher le README
	@echo "$(BLUE)üìñ README:$(RESET)"
	@cat README.md

# Utilitaires
check: ## V√©rifier l'√©tat du syst√®me
	@echo "$(BLUE)üîç V√©rification syst√®me...$(RESET)"
	@echo "$(YELLOW)Node.js:$(RESET) $(shell node --version)"
	@echo "$(YELLOW)NPM:$(RESET) $(shell npm --version)"
	@echo "$(YELLOW)Dossier:$(RESET) $(shell pwd)"
	@echo "$(YELLOW)Agents:$(RESET) $(shell ls agents/ | wc -l | tr -d ' ') fichiers"
	@echo "$(YELLOW)Specs:$(RESET) $(shell ls specs/ | wc -l | tr -d ' ') fichiers"

logs: ## Afficher les logs r√©cents
	@echo "$(BLUE)üìù Logs r√©cents:$(RESET)"
	@find logs/ -name "*.log" -exec tail -n 10 {} \; 2>/dev/null || echo "$(YELLOW)‚ö†Ô∏è Aucun log trouv√©$(RESET)"

# Installation globale
global: ## Installer le CLI globalement
	@echo "$(BLUE)üåê Installation globale du CLI...$(RESET)"
	@npm link
	@echo "$(GREEN)‚úÖ CLI install√© globalement: nutricoach-agents$(RESET)"

# Configuration
config: ## Afficher/cr√©er la configuration
	@echo "$(BLUE)‚öôÔ∏è Configuration syst√®me:$(RESET)"
	@echo "$(YELLOW)Variables d'environnement recommand√©es:$(RESET)"
	@echo "  export CONTEXT7_API_KEY=\"your-api-key\""
	@echo "  export OPENAI_API_KEY=\"your-openai-key\""
	@echo "  export ANTHROPIC_API_KEY=\"your-anthropic-key\""
	@echo "  export OLLAMA_BASE_URL=\"http://localhost:11434\""
	@echo ""
	@echo "$(YELLOW)Variables actuelles:$(RESET)"
	@echo "  CONTEXT7_API_KEY: $(if $(CONTEXT7_API_KEY),‚úÖ D√©finie,‚ùå Non d√©finie)"
	@echo "  OPENAI_API_KEY: $(if $(OPENAI_API_KEY),‚úÖ D√©finie,‚ùå Non d√©finie)"
	@echo "  ANTHROPIC_API_KEY: $(if $(ANTHROPIC_API_KEY),‚úÖ D√©finie,‚ùå Non d√©finie)"

# Par d√©faut, afficher l'aide
.DEFAULT_GOAL := help